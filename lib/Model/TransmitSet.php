<?php
/**
 * TransmitSet
 *
 * PHP version 5
 *
 * @category Class
 * @package  CanadaPost
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Canada Post REST Client
 *
 * Library for Canada Post REST API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CanadaPost\Model;

use \ArrayAccess;
use \CanadaPost\ObjectSerializer;

/**
 * TransmitSet Class Doc Comment
 *
 * @category Class
 * @package  CanadaPost
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TransmitSet implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'transmit-set';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'group_ids' => 'string[]',
        'requested_shipping_point' => 'string',
        'cpc_pickup_indicator' => 'bool',
        'method_of_payment' => 'string',
        'manifest_address' => '\CanadaPost\Model\TransmitsetManifestaddress'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'group_ids' => null,
        'requested_shipping_point' => null,
        'cpc_pickup_indicator' => null,
        'method_of_payment' => null,
        'manifest_address' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'group_ids' => 'group-ids',
        'requested_shipping_point' => 'requested-shipping-point',
        'cpc_pickup_indicator' => 'cpc-pickup-indicator',
        'method_of_payment' => 'method-of-payment',
        'manifest_address' => 'manifest-address'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'group_ids' => 'setGroupIds',
        'requested_shipping_point' => 'setRequestedShippingPoint',
        'cpc_pickup_indicator' => 'setCpcPickupIndicator',
        'method_of_payment' => 'setMethodOfPayment',
        'manifest_address' => 'setManifestAddress'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'group_ids' => 'getGroupIds',
        'requested_shipping_point' => 'getRequestedShippingPoint',
        'cpc_pickup_indicator' => 'getCpcPickupIndicator',
        'method_of_payment' => 'getMethodOfPayment',
        'manifest_address' => 'getManifestAddress'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['group_ids'] = isset($data['group_ids']) ? $data['group_ids'] : null;
        $this->container['requested_shipping_point'] = isset($data['requested_shipping_point']) ? $data['requested_shipping_point'] : null;
        $this->container['cpc_pickup_indicator'] = isset($data['cpc_pickup_indicator']) ? $data['cpc_pickup_indicator'] : null;
        $this->container['method_of_payment'] = isset($data['method_of_payment']) ? $data['method_of_payment'] : null;
        $this->container['manifest_address'] = isset($data['manifest_address']) ? $data['manifest_address'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets group_ids
     *
     * @return string[]
     */
    public function getGroupIds()
    {
        return $this->container['group_ids'];
    }

    /**
     * Sets group_ids
     *
     * @param string[] $group_ids group_ids
     *
     * @return $this
     */
    public function setGroupIds($group_ids)
    {
        $this->container['group_ids'] = $group_ids;

        return $this;
    }

    /**
     * Gets requested_shipping_point
     *
     * @return string
     */
    public function getRequestedShippingPoint()
    {
        return $this->container['requested_shipping_point'];
    }

    /**
     * Sets requested_shipping_point
     *
     * @param string $requested_shipping_point Postal Code of Warehouse
     *
     * @return $this
     */
    public function setRequestedShippingPoint($requested_shipping_point)
    {
        $this->container['requested_shipping_point'] = $requested_shipping_point;

        return $this;
    }

    /**
     * Gets cpc_pickup_indicator
     *
     * @return bool
     */
    public function getCpcPickupIndicator()
    {
        return $this->container['cpc_pickup_indicator'];
    }

    /**
     * Sets cpc_pickup_indicator
     *
     * @param bool $cpc_pickup_indicator True if Canada Post should pick the parcels
     *
     * @return $this
     */
    public function setCpcPickupIndicator($cpc_pickup_indicator)
    {
        $this->container['cpc_pickup_indicator'] = $cpc_pickup_indicator;

        return $this;
    }

    /**
     * Gets method_of_payment
     *
     * @return string
     */
    public function getMethodOfPayment()
    {
        return $this->container['method_of_payment'];
    }

    /**
     * Sets method_of_payment
     *
     * @param string $method_of_payment Account
     *
     * @return $this
     */
    public function setMethodOfPayment($method_of_payment)
    {
        $this->container['method_of_payment'] = $method_of_payment;

        return $this;
    }

    /**
     * Gets manifest_address
     *
     * @return \CanadaPost\Model\TransmitsetManifestaddress
     */
    public function getManifestAddress()
    {
        return $this->container['manifest_address'];
    }

    /**
     * Sets manifest_address
     *
     * @param \CanadaPost\Model\TransmitsetManifestaddress $manifest_address manifest_address
     *
     * @return $this
     */
    public function setManifestAddress($manifest_address)
    {
        $this->container['manifest_address'] = $manifest_address;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


