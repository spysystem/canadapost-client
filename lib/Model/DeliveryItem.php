<?php
/**
 * DeliveryItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  CanadaPost
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Canada Post REST Client
 *
 * Library for Canada Post REST API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CanadaPost\Model;

use \ArrayAccess;
use \CanadaPost\ObjectSerializer;

/**
 * DeliveryItem Class Doc Comment
 *
 * @category Class
 * @package  CanadaPost
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DeliveryItem implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'delivery-item';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'customs_number_of_units' => 'int',
        'customs_unit_of_measure' => 'string',
        'customs_description' => 'string',
        'sku' => 'string',
        'hs_tariff_code' => 'string',
        'unit_weight' => 'float',
        'customs_value_per_unit' => 'float',
        'country_of_origin' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'customs_number_of_units' => null,
        'customs_unit_of_measure' => null,
        'customs_description' => null,
        'sku' => null,
        'hs_tariff_code' => null,
        'unit_weight' => null,
        'customs_value_per_unit' => null,
        'country_of_origin' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'customs_number_of_units' => 'customs-number-of-units',
        'customs_unit_of_measure' => 'customs-unit-of-measure',
        'customs_description' => 'customs-description',
        'sku' => 'sku',
        'hs_tariff_code' => 'hs-tariff-code',
        'unit_weight' => 'unit-weight',
        'customs_value_per_unit' => 'customs-value-per-unit',
        'country_of_origin' => 'country-of-origin'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'customs_number_of_units' => 'setCustomsNumberOfUnits',
        'customs_unit_of_measure' => 'setCustomsUnitOfMeasure',
        'customs_description' => 'setCustomsDescription',
        'sku' => 'setSku',
        'hs_tariff_code' => 'setHsTariffCode',
        'unit_weight' => 'setUnitWeight',
        'customs_value_per_unit' => 'setCustomsValuePerUnit',
        'country_of_origin' => 'setCountryOfOrigin'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'customs_number_of_units' => 'getCustomsNumberOfUnits',
        'customs_unit_of_measure' => 'getCustomsUnitOfMeasure',
        'customs_description' => 'getCustomsDescription',
        'sku' => 'getSku',
        'hs_tariff_code' => 'getHsTariffCode',
        'unit_weight' => 'getUnitWeight',
        'customs_value_per_unit' => 'getCustomsValuePerUnit',
        'country_of_origin' => 'getCountryOfOrigin'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['customs_number_of_units'] = isset($data['customs_number_of_units']) ? $data['customs_number_of_units'] : null;
        $this->container['customs_unit_of_measure'] = isset($data['customs_unit_of_measure']) ? $data['customs_unit_of_measure'] : null;
        $this->container['customs_description'] = isset($data['customs_description']) ? $data['customs_description'] : null;
        $this->container['sku'] = isset($data['sku']) ? $data['sku'] : null;
        $this->container['hs_tariff_code'] = isset($data['hs_tariff_code']) ? $data['hs_tariff_code'] : null;
        $this->container['unit_weight'] = isset($data['unit_weight']) ? $data['unit_weight'] : null;
        $this->container['customs_value_per_unit'] = isset($data['customs_value_per_unit']) ? $data['customs_value_per_unit'] : null;
        $this->container['country_of_origin'] = isset($data['country_of_origin']) ? $data['country_of_origin'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets customs_number_of_units
     *
     * @return int
     */
    public function getCustomsNumberOfUnits()
    {
        return $this->container['customs_number_of_units'];
    }

    /**
     * Sets customs_number_of_units
     *
     * @param int $customs_number_of_units customs_number_of_units
     *
     * @return $this
     */
    public function setCustomsNumberOfUnits($customs_number_of_units)
    {
        $this->container['customs_number_of_units'] = $customs_number_of_units;

        return $this;
    }

    /**
     * Gets customs_unit_of_measure
     *
     * @return string
     */
    public function getCustomsUnitOfMeasure()
    {
        return $this->container['customs_unit_of_measure'];
    }

    /**
     * Sets customs_unit_of_measure
     *
     * @param string $customs_unit_of_measure PCE
     *
     * @return $this
     */
    public function setCustomsUnitOfMeasure($customs_unit_of_measure)
    {
        $this->container['customs_unit_of_measure'] = $customs_unit_of_measure;

        return $this;
    }

    /**
     * Gets customs_description
     *
     * @return string
     */
    public function getCustomsDescription()
    {
        return $this->container['customs_description'];
    }

    /**
     * Sets customs_description
     *
     * @param string $customs_description customs_description
     *
     * @return $this
     */
    public function setCustomsDescription($customs_description)
    {
        $this->container['customs_description'] = $customs_description;

        return $this;
    }

    /**
     * Gets sku
     *
     * @return string
     */
    public function getSku()
    {
        return $this->container['sku'];
    }

    /**
     * Sets sku
     *
     * @param string $sku sku
     *
     * @return $this
     */
    public function setSku($sku)
    {
        $this->container['sku'] = $sku;

        return $this;
    }

    /**
     * Gets hs_tariff_code
     *
     * @return string
     */
    public function getHsTariffCode()
    {
        return $this->container['hs_tariff_code'];
    }

    /**
     * Sets hs_tariff_code
     *
     * @param string $hs_tariff_code pattern = 9999.99.99.99
     *
     * @return $this
     */
    public function setHsTariffCode($hs_tariff_code)
    {
        $this->container['hs_tariff_code'] = $hs_tariff_code;

        return $this;
    }

    /**
     * Gets unit_weight
     *
     * @return float
     */
    public function getUnitWeight()
    {
        return $this->container['unit_weight'];
    }

    /**
     * Sets unit_weight
     *
     * @param float $unit_weight pattern =
     *
     * @return $this
     */
    public function setUnitWeight($unit_weight)
    {
        $this->container['unit_weight'] = $unit_weight;

        return $this;
    }

    /**
     * Gets customs_value_per_unit
     *
     * @return float
     */
    public function getCustomsValuePerUnit()
    {
        return $this->container['customs_value_per_unit'];
    }

    /**
     * Sets customs_value_per_unit
     *
     * @param float $customs_value_per_unit pattern =
     *
     * @return $this
     */
    public function setCustomsValuePerUnit($customs_value_per_unit)
    {
        $this->container['customs_value_per_unit'] = $customs_value_per_unit;

        return $this;
    }

    /**
     * Gets country_of_origin
     *
     * @return string
     */
    public function getCountryOfOrigin()
    {
        return $this->container['country_of_origin'];
    }

    /**
     * Sets country_of_origin
     *
     * @param string $country_of_origin country_of_origin
     *
     * @return $this
     */
    public function setCountryOfOrigin($country_of_origin)
    {
        $this->container['country_of_origin'] = $country_of_origin;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


