<?php
/**
 * DeliverySpec
 *
 * PHP version 5
 *
 * @category Class
 * @package  CanadaPost
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Canada Post REST Client
 *
 * Library for Canada Post REST API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CanadaPost\Model;

use \ArrayAccess;
use \CanadaPost\ObjectSerializer;

/**
 * DeliverySpec Class Doc Comment
 *
 * @category Class
 * @package  CanadaPost
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DeliverySpec implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'delivery-spec';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'service_code' => 'string',
        'sender' => '\CanadaPost\Model\DeliveryspecSender',
        'destination' => '\CanadaPost\Model\DeliveryspecDestination',
        'parcel_characteristics' => '\CanadaPost\Model\DeliveryspecParcelcharacteristics',
        'print_preferences' => '\CanadaPost\Model\DeliveryspecPrintpreferences',
        'preferences' => '\CanadaPost\Model\DeliveryspecPreferences',
        'references' => '\CanadaPost\Model\DeliveryspecReferences',
        'customs' => '\CanadaPost\Model\DeliveryspecCustoms',
        'settlement_info' => '\CanadaPost\Model\DeliveryspecSettlementinfo'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'service_code' => null,
        'sender' => null,
        'destination' => null,
        'parcel_characteristics' => null,
        'print_preferences' => null,
        'preferences' => null,
        'references' => null,
        'customs' => null,
        'settlement_info' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'service_code' => 'service-code',
        'sender' => 'sender',
        'destination' => 'destination',
        'parcel_characteristics' => 'parcel-characteristics',
        'print_preferences' => 'print-preferences',
        'preferences' => 'preferences',
        'references' => 'references',
        'customs' => 'customs',
        'settlement_info' => 'settlement-info'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'service_code' => 'setServiceCode',
        'sender' => 'setSender',
        'destination' => 'setDestination',
        'parcel_characteristics' => 'setParcelCharacteristics',
        'print_preferences' => 'setPrintPreferences',
        'preferences' => 'setPreferences',
        'references' => 'setReferences',
        'customs' => 'setCustoms',
        'settlement_info' => 'setSettlementInfo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'service_code' => 'getServiceCode',
        'sender' => 'getSender',
        'destination' => 'getDestination',
        'parcel_characteristics' => 'getParcelCharacteristics',
        'print_preferences' => 'getPrintPreferences',
        'preferences' => 'getPreferences',
        'references' => 'getReferences',
        'customs' => 'getCustoms',
        'settlement_info' => 'getSettlementInfo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['service_code'] = isset($data['service_code']) ? $data['service_code'] : null;
        $this->container['sender'] = isset($data['sender']) ? $data['sender'] : null;
        $this->container['destination'] = isset($data['destination']) ? $data['destination'] : null;
        $this->container['parcel_characteristics'] = isset($data['parcel_characteristics']) ? $data['parcel_characteristics'] : null;
        $this->container['print_preferences'] = isset($data['print_preferences']) ? $data['print_preferences'] : null;
        $this->container['preferences'] = isset($data['preferences']) ? $data['preferences'] : null;
        $this->container['references'] = isset($data['references']) ? $data['references'] : null;
        $this->container['customs'] = isset($data['customs']) ? $data['customs'] : null;
        $this->container['settlement_info'] = isset($data['settlement_info']) ? $data['settlement_info'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets service_code
     *
     * @return string
     */
    public function getServiceCode()
    {
        return $this->container['service_code'];
    }

    /**
     * Sets service_code
     *
     * @param string $service_code Shipment Type
     *
     * @return $this
     */
    public function setServiceCode($service_code)
    {
        $this->container['service_code'] = $service_code;

        return $this;
    }

    /**
     * Gets sender
     *
     * @return \CanadaPost\Model\DeliveryspecSender
     */
    public function getSender()
    {
        return $this->container['sender'];
    }

    /**
     * Sets sender
     *
     * @param \CanadaPost\Model\DeliveryspecSender $sender sender
     *
     * @return $this
     */
    public function setSender($sender)
    {
        $this->container['sender'] = $sender;

        return $this;
    }

    /**
     * Gets destination
     *
     * @return \CanadaPost\Model\DeliveryspecDestination
     */
    public function getDestination()
    {
        return $this->container['destination'];
    }

    /**
     * Sets destination
     *
     * @param \CanadaPost\Model\DeliveryspecDestination $destination destination
     *
     * @return $this
     */
    public function setDestination($destination)
    {
        $this->container['destination'] = $destination;

        return $this;
    }

    /**
     * Gets parcel_characteristics
     *
     * @return \CanadaPost\Model\DeliveryspecParcelcharacteristics
     */
    public function getParcelCharacteristics()
    {
        return $this->container['parcel_characteristics'];
    }

    /**
     * Sets parcel_characteristics
     *
     * @param \CanadaPost\Model\DeliveryspecParcelcharacteristics $parcel_characteristics parcel_characteristics
     *
     * @return $this
     */
    public function setParcelCharacteristics($parcel_characteristics)
    {
        $this->container['parcel_characteristics'] = $parcel_characteristics;

        return $this;
    }

    /**
     * Gets print_preferences
     *
     * @return \CanadaPost\Model\DeliveryspecPrintpreferences
     */
    public function getPrintPreferences()
    {
        return $this->container['print_preferences'];
    }

    /**
     * Sets print_preferences
     *
     * @param \CanadaPost\Model\DeliveryspecPrintpreferences $print_preferences print_preferences
     *
     * @return $this
     */
    public function setPrintPreferences($print_preferences)
    {
        $this->container['print_preferences'] = $print_preferences;

        return $this;
    }

    /**
     * Gets preferences
     *
     * @return \CanadaPost\Model\DeliveryspecPreferences
     */
    public function getPreferences()
    {
        return $this->container['preferences'];
    }

    /**
     * Sets preferences
     *
     * @param \CanadaPost\Model\DeliveryspecPreferences $preferences preferences
     *
     * @return $this
     */
    public function setPreferences($preferences)
    {
        $this->container['preferences'] = $preferences;

        return $this;
    }

    /**
     * Gets references
     *
     * @return \CanadaPost\Model\DeliveryspecReferences
     */
    public function getReferences()
    {
        return $this->container['references'];
    }

    /**
     * Sets references
     *
     * @param \CanadaPost\Model\DeliveryspecReferences $references references
     *
     * @return $this
     */
    public function setReferences($references)
    {
        $this->container['references'] = $references;

        return $this;
    }

    /**
     * Gets customs
     *
     * @return \CanadaPost\Model\DeliveryspecCustoms
     */
    public function getCustoms()
    {
        return $this->container['customs'];
    }

    /**
     * Sets customs
     *
     * @param \CanadaPost\Model\DeliveryspecCustoms $customs customs
     *
     * @return $this
     */
    public function setCustoms($customs)
    {
        $this->container['customs'] = $customs;

        return $this;
    }

    /**
     * Gets settlement_info
     *
     * @return \CanadaPost\Model\DeliveryspecSettlementinfo
     */
    public function getSettlementInfo()
    {
        return $this->container['settlement_info'];
    }

    /**
     * Sets settlement_info
     *
     * @param \CanadaPost\Model\DeliveryspecSettlementinfo $settlement_info settlement_info
     *
     * @return $this
     */
    public function setSettlementInfo($settlement_info)
    {
        $this->container['settlement_info'] = $settlement_info;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


