<?php
/**
 * Shipment
 *
 * PHP version 5
 *
 * @category Class
 * @package  CanadaPost
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Canada Post REST Client
 *
 * Library for Canada Post REST API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CanadaPost\Model;

use \ArrayAccess;
use \CanadaPost\ObjectSerializer;
use DOMDocument;
use DOMNode;

/**
 * Shipment Class Doc Comment
 *
 * @category Class
 * @package  CanadaPost
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Shipment implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'shipment';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'customer_request_id' => 'string',
        'group_id' => 'string',
        'requested_shipping_point' => 'string',
        'cpc_pickup_indicator' => 'bool',
        'delivery_spec' => '\CanadaPost\Model\DeliverySpec'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'customer_request_id' => null,
        'group_id' => null,
        'requested_shipping_point' => null,
        'cpc_pickup_indicator' => null,
        'delivery_spec' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'customer_request_id' => 'customer-request-id',
        'group_id' => 'group-id',
        'requested_shipping_point' => 'requested-shipping-point',
        'cpc_pickup_indicator' => 'cpc-pickup-indicator',
        'delivery_spec' => 'delivery-spec',
		'options' => 'options'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'customer_request_id' => 'setCustomerRequestId',
        'group_id' => 'setGroupId',
        'requested_shipping_point' => 'setRequestedShippingPoint',
        'cpc_pickup_indicator' => 'setCpcPickupIndicator',
        'delivery_spec' => 'setDeliverySpec',
		'options' => 'setOptions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'customer_request_id' => 'getCustomerRequestId',
        'group_id' => 'getGroupId',
        'requested_shipping_point' => 'getRequestedShippingPoint',
        'cpc_pickup_indicator' => 'getCpcPickupIndicator',
        'delivery_spec' => 'getDeliverySpec'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['customer_request_id'] = isset($data['customer_request_id']) ? $data['customer_request_id'] : null;
        $this->container['group_id'] = isset($data['group_id']) ? $data['group_id'] : null;
        $this->container['requested_shipping_point'] = isset($data['requested_shipping_point']) ? $data['requested_shipping_point'] : null;
        $this->container['cpc_pickup_indicator'] = isset($data['cpc_pickup_indicator']) ? $data['cpc_pickup_indicator'] : null;
        $this->container['delivery_spec'] = isset($data['delivery_spec']) ? $data['delivery_spec'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets customer_request_id
     *
     * @return string
     */
    public function getCustomerRequestId()
    {
        return $this->container['customer_request_id'];
    }

    /**
     * Sets customer_request_id
     *
     * @param string $customer_request_id Customer ID
     *
     * @return $this
     */
    public function setCustomerRequestId($customer_request_id)
    {
        $this->container['customer_request_id'] = $customer_request_id;

        return $this;
    }

    /**
     * Gets group_id
     *
     * @return string
     */
    public function getGroupId()
    {
        return $this->container['group_id'];
    }

    /**
     * Sets group_id
     *
     * @param string $group_id Group (always Spy-XXX)
     *
     * @return $this
     */
    public function setGroupId($group_id)
    {
        $this->container['group_id'] = $group_id;

        return $this;
    }

    /**
     * Gets requested_shipping_point
     *
     * @return string
     */
    public function getRequestedShippingPoint()
    {
        return $this->container['requested_shipping_point'];
    }

    /**
     * Sets requested_shipping_point
     *
     * @param string $requested_shipping_point Postal Code of Warehouse
     *
     * @return $this
     */
    public function setRequestedShippingPoint($requested_shipping_point)
    {
        $this->container['requested_shipping_point'] = $requested_shipping_point;

        return $this;
    }

    /**
     * Gets cpc_pickup_indicator
     *
     * @return bool
     */
    public function getCpcPickupIndicator()
    {
        return $this->container['cpc_pickup_indicator'];
    }

    /**
     * Sets cpc_pickup_indicator
     *
     * @param bool $cpc_pickup_indicator True if Canada Post should pick the parcels
     *
     * @return $this
     */
    public function setCpcPickupIndicator($cpc_pickup_indicator)
    {
        $this->container['cpc_pickup_indicator'] = $cpc_pickup_indicator;

        return $this;
    }

    /**
     * Gets delivery_spec
     *
     * @return \CanadaPost\Model\DeliverySpec
     */
    public function getDeliverySpec()
    {
        return $this->container['delivery_spec'];
    }

    /**
     * Sets delivery_spec
     *
     * @param \CanadaPost\Model\DeliverySpec $delivery_spec delivery_spec
     *
     * @return $this
     */
    public function setDeliverySpec($delivery_spec)
    {
        $this->container['delivery_spec'] = $delivery_spec;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

	/**
	 * Gets the string presentation of the object
	 *
	 * @return string
	 * @throws \Exception
	 */
	public function __toString()
	{
		$oSanitizedObject	= ObjectSerializer::sanitizeForSerialization($this);

		$oSerializer	= new \XML_Serializer([
			XML_SERIALIZER_OPTION_INDENT		=> '    ',
			XML_SERIALIZER_OPTION_LINEBREAKS	=> "\n",
			XML_SERIALIZER_OPTION_DEFAULT_TAG	=> 'item', // This is probably the biggest hack in this project, together with the same hack in TransmitSet! :D :D :D
			XML_SERIALIZER_OPTION_ROOT_NAME		=> 'shipment',
			XML_SERIALIZER_OPTION_ROOT_ATTRIBS	=> [ 'xmlns' => 'http://www.canadapost.ca/ws/shipment-v8' ]
		]);

		if(!$oSerializer->serialize($oSanitizedObject))
		{
			throw new \Exception('Could not serialize object');
		}

		return "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n".self::ConvertItemToOption($oSerializer->getSerializedData());

	}

	/**
	 * @param string $strXML
	 *
	 * @return string
	 */
	protected static function ConvertItemToOption(string $strXML): string
	{
		$oDom	= new DOMDocument();
		$oDom->loadXML($strXML);


		$oOptionsNodeList	= $oDom->getElementsByTagName('options');

		if($oOptionsNodeList->length > 0)
		{
			$oOptionsNode	= $oOptionsNodeList->item(0);

			/** @var DOMNode $oItem */
			foreach($oOptionsNode->getElementsByTagName('item') as $oItem)
			{
				$oOption	= $oDom->createElement('option');
				$oOption->removeAttribute('xmlns');
				/** @var DOMNode $oChildNode */
				foreach ($oItem->childNodes as $oChildNode)
				{
					$oOption->appendChild($oChildNode->cloneNode(true));
				}

				$oItem->parentNode->replaceChild($oOption, $oItem);
			}
		}

		return $oDom->saveXML($oDom->documentElement);
	}
}


