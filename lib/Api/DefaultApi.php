<?php
/**
 * DefaultApi
 * PHP version 5
 *
 * @category Class
 * @package  CanadaPost
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Canada Post REST Client
 *
 * Library for Canada Post REST API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CanadaPost\Api;

use CanadaPost\Model\ErrorResponseObject;
use CanadaPost\Model\Manifests;
use CanadaPost\Model\ShipmentInfo;
use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use CanadaPost\ApiException;
use CanadaPost\Configuration;
use CanadaPost\HeaderSelector;
use CanadaPost\ObjectSerializer;
use InvalidArgumentException;
use Psr\Http\Message\StreamInterface;
use SplFileObject;
use SpyHelper\JsonSimpleXMLElementDecorator;

/**
 * DefaultApi Class Doc Comment
 *
 * @category Class
 * @package  CanadaPost
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DefaultApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createShipment
     *
     * creates a Shipment
     *
     * @param  string $str_customer Customer Number (required)
     * @param  string $str_mobo Mailed On Behalf Of Custoner Number (required)
     * @param  string $accept_language accept_language (optional)
     * @param  \CanadaPost\Model\Shipment $xmlbody Shipment data (optional)
     *
     * @throws \CanadaPost\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \CanadaPost\Model\ShipmentInfo
     */
    public function createShipment($str_customer, $str_mobo, $accept_language = null, $xmlbody = null)
    {
        list($response) = $this->createShipmentWithHttpInfo($str_customer, $str_mobo, $accept_language, $xmlbody);
        return $response;
    }

	/**
	 * @param StreamInterface $oStream
	 *
	 * @return string
	 */
    protected static function GetJsonStringFromXMLStream(StreamInterface $oStream): string
	{
		$strXML		= $oStream->getContents();
		$oXML		= simplexml_load_string($strXML);
		$oDecorator	= new JsonSimpleXMLElementDecorator($oXML, true);
		return json_encode($oDecorator, JSON_PRETTY_PRINT);
	}

    /**
     * Operation createShipmentWithHttpInfo
     *
     * creates a Shipment
     *
     * @param  string $str_customer Customer Number (required)
     * @param  string $str_mobo Mailed On Behalf Of Custoner Number (required)
     * @param  string $accept_language (optional)
     * @param  \CanadaPost\Model\Shipment $xmlbody Shipment data (optional)
     *
     * @throws \CanadaPost\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \CanadaPost\Model\ShipmentInfo, HTTP status code, HTTP response headers (array of strings)
     */
    public function createShipmentWithHttpInfo($str_customer, $str_mobo, $accept_language = null, $xmlbody = null)
    {
        $returnType = ShipmentInfo::class;
        $request = $this->createShipmentRequest($str_customer, $str_mobo, $accept_language, $xmlbody);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? json_decode(self::GetJsonStringFromXMLStream($e->getResponse()->getBody())) : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    json_decode(self::GetJsonStringFromXMLStream($response->getBody()))
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === SplFileObject::class) {
                $content = $responseBody; //stream goes to serializer
            } else {
				$content	= self::GetJsonStringFromXMLStream($responseBody);
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        ShipmentInfo::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 202:
                case 400:
                case 401:
                case 403:
                case 404:
                case 406:
                case 415:
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        ErrorResponseObject::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createShipmentAsync
     *
     * creates a Shipment
     *
     * @param  string $str_customer Customer Number (required)
     * @param  string $str_mobo Mailed On Behalf Of Custoner Number (required)
     * @param  string $accept_language (optional)
     * @param  \CanadaPost\Model\Shipment $xmlbody Shipment data (optional)
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createShipmentAsync($str_customer, $str_mobo, $accept_language = null, $xmlbody = null)
    {
        return $this->createShipmentAsyncWithHttpInfo($str_customer, $str_mobo, $accept_language, $xmlbody)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createShipmentAsyncWithHttpInfo
     *
     * creates a Shipment
     *
     * @param  string $str_customer Customer Number (required)
     * @param  string $str_mobo Mailed On Behalf Of Custoner Number (required)
     * @param  string $accept_language (optional)
     * @param  \CanadaPost\Model\Shipment $xmlbody Shipment data (optional)
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createShipmentAsyncWithHttpInfo($str_customer, $str_mobo, $accept_language = null, $xmlbody = null)
    {
        $returnType = ShipmentInfo::class;
        $request = $this->createShipmentRequest($str_customer, $str_mobo, $accept_language, $xmlbody);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === SplFileObject::class) {
                        $content = $responseBody; //stream goes to serializer
                    } else {
						$content	= self::GetJsonStringFromXMLStream($responseBody);
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
						json_decode(self::GetJsonStringFromXMLStream($response->getBody()))
                    );
                }
            );
    }

    /**
     * Create request for operation 'createShipment'
     *
     * @param  string $str_customer Customer Number (required)
     * @param  string $str_mobo Mailed On Behalf Of Custoner Number (required)
     * @param  string $accept_language (optional)
     * @param  \CanadaPost\Model\Shipment $xmlbody Shipment data (optional)
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createShipmentRequest($str_customer, $str_mobo, $accept_language = null, $xmlbody = null)
    {
        // verify the required parameter 'str_customer' is set
        if ($str_customer === null) {
            throw new InvalidArgumentException(
                'Missing the required parameter $str_customer when calling createShipment'
            );
        }
        // verify the required parameter 'str_mobo' is set
        if ($str_mobo === null) {
            throw new InvalidArgumentException(
                'Missing the required parameter $str_mobo when calling createShipment'
            );
        }

        $resourcePath = '/{strCustomer}/{strMobo}/shipment';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-language'] = ObjectSerializer::toHeaderValue($accept_language);
        }

        // path params
        if ($str_customer !== null) {
            $resourcePath = str_replace(
                '{' . 'strCustomer' . '}',
                ObjectSerializer::toPathValue($str_customer),
                $resourcePath
            );
        }
        // path params
        if ($str_mobo !== null) {
            $resourcePath = str_replace(
                '{' . 'strMobo' . '}',
                ObjectSerializer::toPathValue($str_mobo),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($xmlbody)) {
            $_tempBody = $xmlbody;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/vnd.cpc.shipment-v8+xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/vnd.cpc.shipment-v8+xml'],
                ['application/vnd.cpc.shipment-v8+xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation transmitShipment
     *
     * transmits a Shipment
     *
     * @param  string $str_customer Customer Number (required)
     * @param  string $str_mobo Mailed On Behalf Of Custoner Number (required)
     * @param  string $accept_language accept_language (optional)
     * @param  \CanadaPost\Model\TransmitSet $xmlbody Transmit set data (optional)
     *
     * @throws \CanadaPost\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \CanadaPost\Model\Manifests
     */
    public function transmitShipment($str_customer, $str_mobo, $accept_language = null, $xmlbody = null)
    {
        list($response) = $this->transmitShipmentWithHttpInfo($str_customer, $str_mobo, $accept_language, $xmlbody);
        return $response;
    }

    /**
     * Operation transmitShipmentWithHttpInfo
     *
     * transmits a Shipment
     *
     * @param  string $str_customer Customer Number (required)
     * @param  string $str_mobo Mailed On Behalf Of Custoner Number (required)
     * @param  string $accept_language (optional)
     * @param  \CanadaPost\Model\TransmitSet $xmlbody Transmit set data (optional)
     *
     * @throws \CanadaPost\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \CanadaPost\Model\Manifests, HTTP status code, HTTP response headers (array of strings)
     */
    public function transmitShipmentWithHttpInfo($str_customer, $str_mobo, $accept_language = null, $xmlbody = null)
    {
        $returnType = Manifests::class;
        $request = $this->transmitShipmentRequest($str_customer, $str_mobo, $accept_language, $xmlbody);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
					$e->getResponse() ? json_decode(self::GetJsonStringFromXMLStream($e->getResponse()->getBody())) : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
					json_decode(self::GetJsonStringFromXMLStream($response->getBody()))
                );
            }

            $responseBody = $response->getBody();
            if ($returnType ===SplFileObject::class) {
                $content = $responseBody; //stream goes to serializer
            } else {
				$content	= self::GetJsonStringFromXMLStream($responseBody);
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        Manifests::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
				case 202:
				case 400:
				case 401:
				case 403:
				case 404:
				case 406:
				case 415:
				case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        ErrorResponseObject::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation transmitShipmentAsync
     *
     * transmits a Shipment
     *
     * @param  string $str_customer Customer Number (required)
     * @param  string $str_mobo Mailed On Behalf Of Custoner Number (required)
     * @param  string $accept_language (optional)
     * @param  \CanadaPost\Model\TransmitSet $xmlbody Transmit set data (optional)
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function transmitShipmentAsync($str_customer, $str_mobo, $accept_language = null, $xmlbody = null)
    {
        return $this->transmitShipmentAsyncWithHttpInfo($str_customer, $str_mobo, $accept_language, $xmlbody)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation transmitShipmentAsyncWithHttpInfo
     *
     * transmits a Shipment
     *
     * @param  string $str_customer Customer Number (required)
     * @param  string $str_mobo Mailed On Behalf Of Custoner Number (required)
     * @param  string $accept_language (optional)
     * @param  \CanadaPost\Model\TransmitSet $xmlbody Transmit set data (optional)
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function transmitShipmentAsyncWithHttpInfo($str_customer, $str_mobo, $accept_language = null, $xmlbody = null)
    {
        $returnType = Manifests::class;
        $request = $this->transmitShipmentRequest($str_customer, $str_mobo, $accept_language, $xmlbody);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === SplFileObject::class) {
                        $content = $responseBody; //stream goes to serializer
                    } else {
						$content	= self::GetJsonStringFromXMLStream($responseBody);
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
						json_decode(self::GetJsonStringFromXMLStream($response->getBody()))
                    );
                }
            );
    }

    /**
     * Create request for operation 'transmitShipment'
     *
     * @param  string $str_customer Customer Number (required)
     * @param  string $str_mobo Mailed On Behalf Of Custoner Number (required)
     * @param  string $accept_language (optional)
     * @param  \CanadaPost\Model\TransmitSet $xmlbody Transmit set data (optional)
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function transmitShipmentRequest($str_customer, $str_mobo, $accept_language = null, $xmlbody = null)
    {
        // verify the required parameter 'str_customer' is set
        if ($str_customer === null) {
            throw new InvalidArgumentException(
                'Missing the required parameter $str_customer when calling transmitShipment'
            );
        }
        // verify the required parameter 'str_mobo' is set
        if ($str_mobo === null) {
            throw new InvalidArgumentException(
                'Missing the required parameter $str_mobo when calling transmitShipment'
            );
        }

        $resourcePath = '/{strCustomer}/{strMobo}/manifest';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-language'] = ObjectSerializer::toHeaderValue($accept_language);
        }

        // path params
        if ($str_customer !== null) {
            $resourcePath = str_replace(
                '{' . 'strCustomer' . '}',
                ObjectSerializer::toPathValue($str_customer),
                $resourcePath
            );
        }
        // path params
        if ($str_mobo !== null) {
            $resourcePath = str_replace(
                '{' . 'strMobo' . '}',
                ObjectSerializer::toPathValue($str_mobo),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($xmlbody)) {
            $_tempBody = $xmlbody;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/vnd.cpc.manifest-v8+xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/vnd.cpc.manifest-v8+xml'],
                ['application/vnd.cpc.manifest-v8+xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
